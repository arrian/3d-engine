#include "ScriptManager.h"

//Boost
#include <boost/lexical_cast.hpp>

//Ogre
#include <OgreRenderWindow.h>

//Local
#include "World.h"
#include "Player.h"
#include "Scene.h"
#include "Portal.h"

#include "ScenePhysicsManager.h"
#include "SceneGraphicsManager.h"
#include "ScenePathfindManager.h"

#include "ConsoleScreen.h"

//Lua Bind
#include <luabind/luabind.hpp>
#include <luabind/function.hpp>
#include "LuaBind.h"


ScriptManager::ScriptManager(void)
  : world(),
    done(false),
    outputs(),
    state(NULL)
{
  state = lua_open();
  luaL_openlibs(state);
  bindLua(state);

  /*
  addCommand("help", "", "shows the help list", &ScriptManager::help);
  addCommand("about", "", "show game info", &ScriptManager::about);
  addCommand("reset", "", "resets the scene", &ScriptManager::reset);
  addCommand("exit", "", "exits the game", &ScriptManager::exit);
  addCommand("screenshot", "", "takes a screenshot and outputs to the executable directory", &ScriptManager::screenshot);
  addCommand("setPhysicsEnabled", "(true | false)", "enables and disables collision", &ScriptManager::setPhysicsEnabled);
  addCommand("setCameraFree", "(true | false)", "frees or attaches the camera from/to the player", &ScriptManager::setCameraFree);
  addCommand("setFullscreen", "width height", "sets the display to fullscreen", &ScriptManager::setFullscreen);
  addCommand("setWindowed", "width height", "set the display to windowed", &ScriptManager::setWindowed);
  addCommand("setPlayerScene", "id", "sets the player scene", &ScriptManager::setPlayerScene);
  addCommand("setSceneAmbientLight", "red green blue alpha", "sets the ambient light of the current scene", &ScriptManager::setSceneAmbientLight);
  addCommand("setPlayerPosition", "x y z", "sets the player position", &ScriptManager::setPlayerPosition);
  addCommand("setPlayerItemGenerationID", "id", "sets the id of the item generated by the player", &ScriptManager::setPlayerItemGenerationID);
  addCommand("getItemData", "id", "gets the item associated with the given id", &ScriptManager::getItemData);
  addCommand("getCreatureData", "id", "gets the creature associated with the given id", &ScriptManager::getCreatureData);
  addCommand("getArchitectureData", "id", "gets the architecture associated with the given id", &ScriptManager::getArchitectureData);
  addCommand("getSoundData", "id", "gets the sound associated with the given id", &ScriptManager::getSoundData);
  addCommand("getSceneData", "id", "gets the scene associated with the given id", &ScriptManager::getSceneData);
  addCommand("getDataFiles", "", "gets a list of the active data files", &ScriptManager::getDataFiles);
  addCommand("getPhysicsInfo", "", "gets the current state of the physics", &ScriptManager::getPhysicsInfo);
  addCommand("getPlayerPosition", "", "gets the player position", &ScriptManager::getPlayerPosition);
  addCommand("getGameInfo", "", "gets the current state of the game", &ScriptManager::getGameInfo);
  addCommand("getSceneInfo", "", "gets the current state of the scene", &ScriptManager::getSceneInfo);
  addCommand("getWorldInfo", "", "gets the current state of the world", &ScriptManager::getWorldInfo);
  addCommand("addItem", "id (@player | (x y z)) [number]", "adds the given item to the scene", &ScriptManager::addItem);
  addCommand("addCreature", "id x y z", "adds the given creature to the scene", &ScriptManager::addCreature);
  addCommand("setSceneLoaded", "id (true | false)", "loads or unloads the given scene", &ScriptManager::setSceneLoaded);
  addCommand("setSceneDrawDebugNavMesh", "(true | false)", "displays or hides the scene navigation mesh", &ScriptManager::setSceneDrawDebugNavMesh);
  addCommand("setSceneShadowsEnabled", "(true | false)", "shows or hides shadows", &ScriptManager::setSceneShadowsEnabled);
  addCommand("setSceneGravity", "x y z", "sets the scene gravity", &ScriptManager::setSceneGravity);
  */
}

//-------------------------------------------------------------------------------------
ScriptManager::~ScriptManager(void)
{

}

//-------------------------------------------------------------------------------------
bool ScriptManager::update(double elapsedSeconds)
{
  return !done;
}

//-------------------------------------------------------------------------------------
void ScriptManager::execute(std::string command)
{
  //Execute
  int initialStackSize = lua_gettop(state);
  const char* command_c = command.c_str();
  luaL_dostring(state, command_c);
  int finalStackSize = lua_gettop(state);
  
 
  //Print result
  for(int i = initialStackSize + 1; i <= finalStackSize; i++)
  {
    if(!lua_isnil(state, i)) 
    {
      std::string result = lua_tostring(state, i);
      display(result);
    }
    lua_pop(state, 1);
  }
}

//-------------------------------------------------------------------------------------
void ScriptManager::run(std::string file)
{
  Ogre::DataStreamPtr ptr = Ogre::ResourceGroupManager::getSingletonPtr()->openResource(file);
  if(ptr.isNull()) throw NHException("script not found");
  execute(ptr->getAsString());
}

//-------------------------------------------------------------------------------------
void ScriptManager::split(const std::string &s, char delim, std::vector<std::string> &elems) 
{
  std::stringstream ss(s);
  std::string item;
  while(std::getline(ss, item, delim)) elems.push_back(item);
}

//-------------------------------------------------------------------------------------
void ScriptManager::setWorld(boost::shared_ptr<World> world)
{
  this->world = boost::weak_ptr<World>(world);
  initialiseLua();
}

//-------------------------------------------------------------------------------------
void ScriptManager::initialiseLua()
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not initialise lua in script manager. World has expired.");

  //Globals
  luabind::globals(state)["world"] = world_ptr.get();//TODO: change to managed pointer later
  luabind::globals(state)["control"] = world_ptr->getControlManager();
  luabind::globals(state)["data"] = world_ptr->getDataManager();
  luabind::globals(state)["graphics"] = world_ptr->getGraphicsManager();
  luabind::globals(state)["network"] = world_ptr->getNetworkManager();
  luabind::globals(state)["physics"] = world_ptr->getPhysicsManager();
  luabind::globals(state)["script"] = world_ptr->getScriptManager();
  luabind::globals(state)["sound"] = world_ptr->getSoundManager();
  luabind::globals(state)["time"] = world_ptr->getTimeManager();

  //Redirect print
  lua_pushcfunction(state, printLua);
  lua_setglobal(state, "print");
}

//-------------------------------------------------------------------------------------
bool ScriptManager::stringToBool(std::string string)
{
  return (string == "1" || boost::algorithm::to_lower_copy(string) == "true");
}

//-------------------------------------------------------------------------------------
void ScriptManager::about()
{
  display("Copyright Arrian Purcell 2013.");
}

//-------------------------------------------------------------------------------------
void ScriptManager::exit()
{
  done = true;
}

//-------------------------------------------------------------------------------------
void ScriptManager::help()
{

}

//-------------------------------------------------------------------------------------
void ScriptManager::screenshot()
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not take a screenshot in script manager. World has expired.");

  //Console::getInstance().setVisible(false);
  if(world_ptr->getGraphicsManager()->getWindow())display("Screenshot saved to '" + world_ptr->getGraphicsManager()->getWindow()->writeContentsToTimestampedFile("screenshot", ".png") + "'.");
  //Console::getInstance().setVisible(true);
}

//-------------------------------------------------------------------------------------
void ScriptManager::setCameraFree(bool free)
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not set camera free in script manager. World has expired.");

  world_ptr->getPlayer()->setFreeCamera(free);
}

//-------------------------------------------------------------------------------------
void ScriptManager::setFullscreen(int width, int height)
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not set to fullscreen in script manager. World has expired.");

  if(width <= 0 || height <= 0) throw NHException("bad screen dimensions");
  else if(world_ptr->getGraphicsManager()->getWindow()) world_ptr->getGraphicsManager()->getWindow()->setFullscreen(true, width, height);
  else throw NHException("no window to set to fullscreen mode");
}

//-------------------------------------------------------------------------------------
void ScriptManager::setWindowed(int width, int height)
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not set to windowed in script manager. World has expired.");

  if(width <= 0 || height <= 0) throw NHException("bad screen dimensions");
  else if(world_ptr->getGraphicsManager()->getWindow()) world_ptr->getGraphicsManager()->getWindow()->setFullscreen(false, width, height);
  else throw NHException("no window to set to windowed mode");
}

//-------------------------------------------------------------------------------------
void ScriptManager::setPlayerItemGenerationID(int id)
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not set player item generation id in script manager. World has expired.");

  world_ptr->getPlayer()->setItemGenerationID(id);
}

//-------------------------------------------------------------------------------------
void ScriptManager::getPhysicsInfo()
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not get physics info in script manager. World has expired.");

  boost::shared_ptr<Scene> target = world_ptr->getPlayer()->getScene();
  if(target) 
  {
    physx::PxScene* physics = target->getScenePhysicsManager()->getScenePhysics();
    if(physics)
    {
      display("gravity", boost::lexical_cast<std::string>(target->getScenePhysicsManager()->getGravity().length()));
      display("current timestamp", boost::lexical_cast<std::string>(physics->getTimestamp()));
      display("number of rigid static actors", boost::lexical_cast<std::string>(physics->getNbActors(physx::PxActorTypeSelectionFlags(physx::PxActorTypeSelectionFlag::eRIGID_STATIC))));
      display("number of rigid dynamic actors", boost::lexical_cast<std::string>(physics->getNbActors(physx::PxActorTypeSelectionFlags(physx::PxActorTypeSelectionFlag::eRIGID_DYNAMIC))));
      display("number of cloth actors", boost::lexical_cast<std::string>(physics->getNbActors(physx::PxActorTypeSelectionFlags(physx::PxActorTypeSelectionFlag::eCLOTH))));
      display("number of particle fluid actors", boost::lexical_cast<std::string>(physics->getNbActors(physx::PxActorTypeSelectionFlags(physx::PxActorTypeSelectionFlag::ePARTICLE_FLUID))));
      display("number of particle system actors", boost::lexical_cast<std::string>(physics->getNbActors(physx::PxActorTypeSelectionFlags(physx::PxActorTypeSelectionFlag::ePARTICLE_SYSTEM))));
      display("number of aggregates", boost::lexical_cast<std::string>(physics->getNbAggregates()));
      display("number of articulations", boost::lexical_cast<std::string>(physics->getNbArticulations()));
      display("number of constraints", boost::lexical_cast<std::string>(physics->getNbConstraints()));
    }
    else throw NHException("no physics associated with this scene");
  }
  else throw NHException("player needs to be located within a scene to be able to query the physics");
}

//-------------------------------------------------------------------------------------
void ScriptManager::getGameInfo()
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not get game info in script manager. World has expired.");

  Ogre::RenderWindow* window = world_ptr->getGraphicsManager()->getWindow();
  if(!window) throw NHException("no render window found");
  display("average fps", boost::lexical_cast<std::string>(int(window->getAverageFPS())));
  display("best fps", boost::lexical_cast<std::string>(window->getBestFPS()));
  display("batches", boost::lexical_cast<std::string>(window->getBatchCount()));
  display("colour depth", boost::lexical_cast<std::string>(window->getColourDepth()));
  display("number of viewports", boost::lexical_cast<std::string>(window->getNumViewports()));
  display("triangle count", boost::lexical_cast<std::string>(window->getTriangleCount()));
  display("window size", boost::lexical_cast<std::string>(window->getWidth()) + "x" + Ogre::StringConverter::toString(window->getHeight()));
  display("number of loaded scenes", boost::lexical_cast<std::string>(world_ptr->getSceneCount()));

  std::map<Id<Scene>, std::string> names;
  world_ptr->getSceneNames(names);
  std::string list = "";
  for(std::map<Id<Scene>, std::string>::iterator it = names.begin(); it != names.end(); ++it) list += boost::lexical_cast<std::string>(it->first.getInstance()) + ": \"" + it->second + "\" ";
  display("loaded scenes", list);
}

//-------------------------------------------------------------------------------------
void ScriptManager::getSceneInfo()
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not get scene info in script manager. World has expired.");

  display("name", world_ptr->getPlayer()->getScene()->getName());
  display("ogre internal name", world_ptr->getPlayer()->getScene()->getName());
}

//-------------------------------------------------------------------------------------
void ScriptManager::getWorldInfo()
{

}

//-------------------------------------------------------------------------------------
void ScriptManager::reset()
{
  boost::shared_ptr<World> world_ptr = getWorld();
  if(!world_ptr) throw NHException("Could not reset scene in script manager. World has expired.");

  if(!world_ptr) throw NHException("no world found");
  if(!world_ptr->getPlayer()) throw NHException("no player found");
  if(!world_ptr->getPlayer()->getScene()) throw NHException("no scene found");
  world_ptr->getPlayer()->getScene()->reset();
}

//-------------------------------------------------------------------------------------
void ScriptManager::addOutputTarget(OutputCallback* target)
{
  outputs.push_back(target);
}

//-------------------------------------------------------------------------------------
void ScriptManager::display(std::string comment)
{
  for(std::vector<OutputCallback*>::iterator iter = outputs.begin(); iter != outputs.end(); ++iter)
  {
    (*iter)->print(comment);
  }
}

//-------------------------------------------------------------------------------------
void ScriptManager::display(std::string highlight, std::string comment)
{
  for(std::vector<OutputCallback*>::iterator iter = outputs.begin(); iter != outputs.end(); ++iter)
  {
    (*iter)->print(highlight, comment);
  }
}

//-------------------------------------------------------------------------------------
int ScriptManager::display(lua_State* state)
{
  int i;
  int nargs = lua_gettop(state);
  for(i=1; i <= nargs; ++i) display(lua_tostring(state, i));
  printf("\n");
  return 0;
}

//-------------------------------------------------------------------------------------
void ScriptManager::setConsole(ConsoleScreen* console)
{
  luabind::globals(state)["console"] = console;
}
